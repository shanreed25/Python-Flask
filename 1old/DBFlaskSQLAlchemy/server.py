from flask import Flask, jsonify, render_template, request
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column
from sqlalchemy import Integer, String, Boolean
import random

'''
Install the required packages first: 
Open the Terminal in PyCharm (bottom left). 

On Windows type:
python -m pip install -r requirements.txt

On MacOS type:
pip3 install -r requirements.txt

This will install the packages from requirements.txt for this project.
'''

app = Flask(__name__)

# CREATE DB: your application's database models (e.g., User, Product, Order) will then inherit from this Base class.
# This centralizes the ORM setup and makes it easy to manage your models
class Base(DeclarativeBase):# DeclarativeBase serves as the base class for all your ORM-mapped models
    pass
# Connect to Database
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///cafes.db' # Configure the Database URI

# creates an instance of the SQLAlchemy class, which is the core of the Flask-SQLAlchemy extension.
# this db object will then be used to interact with your database within your Flask application
db = SQLAlchemy(model_class=Base)# model_class=Base argument tells Flask-SQLAlchemy to use a custom base class for your database models instead of its default db.Model

# connects the SQLAlchemy database instance (db) to a specific Flask application instance (app),
# enabling the extension to function correctly within that application's context.
db.init_app(app)


# Cafe TABLE Configuration: Define Database Models
class Cafe(db.Model):# inherit from db.Model, provided by Flask-SQLAlchemy
    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    name: Mapped[str] = mapped_column(String(250), unique=True, nullable=False)
    map_url: Mapped[str] = mapped_column(String(500), nullable=False)
    img_url: Mapped[str] = mapped_column(String(500), nullable=False)
    location: Mapped[str] = mapped_column(String(250), nullable=False)
    seats: Mapped[str] = mapped_column(String(250), nullable=False)
    has_toilet: Mapped[bool] = mapped_column(Boolean, nullable=False)
    has_wifi: Mapped[bool] = mapped_column(Boolean, nullable=False)
    has_sockets: Mapped[bool] = mapped_column(Boolean, nullable=False)
    can_take_calls: Mapped[bool] = mapped_column(Boolean, nullable=False)
    coffee_price: Mapped[str] = mapped_column(String(250), nullable=True)

# for converting it to a dictionary to use return jsonify(cafe=random_cafe.to_dict()) in the get_cafe function
    def to_dict(self):
        # Method 1.
        dictionary = {}
        # Loop through each column in the data record
        for column in self.__table__.columns:
            # Create a new dictionary entry;
            # where the key is the name of the column
            # and the value is the value of the column
            dictionary[column.name] = getattr(self, column.name)
        return dictionary

        # Method 2. Altenatively use Dictionary Comprehension to do the same thing.
        # return {column.name: getattr(self, column.name) for column in self.__table__.columns}


# this construct creates a temporary application context. When you wrap db.create_all() within with app.app_context():,
# you are explicitly telling Flask to push an application context for the duration of that block. This ensures that
# db.create_all() has the necessary context to locate the app instance and its configurations, allowing it to connect
# to the database and create the tables based on your defined models
with app.app_context():
    db.create_all()


@app.route("/")
def home():
    return render_template("index.html")


# HTTP GET - Read All Records
@app.route("/all")
def get_all_cafes():
    # .execute: used to send SQL statements to the database and retrieve results
         #  available on Connection and Engine objects within the SQLAlchemy Core, and also on Session objects when working with the ORM
         # takes a SQL statement as an argument: can be
            # A raw SQL string, typically wrapped in sqlalchemy.text() for safety and proper parameter handling
            # A SQLAlchemy expression language construct, such as those generated by select(), insert(), update(), or delete()
    result = db.session.execute(db.select(Cafe).order_by(Cafe.name))
    all_cafes = result.scalars().all()# convert your result into a Python list with .scalars()
    #This uses a List Comprehension but you could also split it into 3 lines.
    return jsonify(cafes=[cafe.to_dict() for cafe in all_cafes])


# HTTP GET - Find a Cafe
@app.route("/search")
def find_cafe():
#Parameters are passed in the URL with a ?
#search for cafes at a particular location, return all the cafes in a particular area
    query_location = request.args.get("loc")# route in url example /search?loc=Peckham
# where() used to select and filter results
    result = db.session.execute(db.select(Cafe).where(Cafe.location == query_location))
    # Note, this may get more than one cafe per location
    all_cafes = result.scalars().all()
    if all_cafes:
        return jsonify(cafes=[cafe.to_dict() for cafe in all_cafes])
    else:
        return jsonify(error={"Not Found": "Sorry, we don't have a cafe at that location."}), 404

# HTTP GET - Read Record
@app.route("/random")
def get_cafe():
    result = db.session.execute(db.select(Cafe))
    all_cafes = result.scalars().all()
    random_cafe = random.choice(all_cafes)

    return jsonify(cafe=random_cafe.to_dict())



# HTTP POST - Create Record
@app.route("/add", methods=["POST"])
def post_new_cafe():
    new_cafe = Cafe(
        name=request.form.get("name"),
        map_url=request.form.get("map_url"),
        img_url=request.form.get("img_url"),
        location=request.form.get("location"),
        has_sockets=bool(request.form.get("sockets")),
        has_toilet=bool(request.form.get("toilet")),
        has_wifi=bool(request.form.get("wifi")),
        can_take_calls=bool(request.form.get("calls")),
        seats=request.form.get("seats"),
        coffee_price=request.form.get("coffee_price"),
    )
    db.session.add(new_cafe)
    db.session.commit()
    return jsonify(response={"success": "Successfully added the new cafe."})

# HTTP PUT/PATCH - Update Record
# if a user wanted to submit a change on particular field
# the id of the café, which you can get by making a GET request to fetch data on all the cafes,
# then you can update the field you want of the café
# PATCH request is more efficient, as we don't need to change any of the rest of the cafe's data
# Updating the price of a cafe based on a particular id:
# http://127.0.0.1:5000/update-price/CAFE_ID?new_price=£5.67
@app.route("/update-price/<int:cafe_id>", methods=["PATCH"])
def patch_new_price(cafe_id):
    new_price = request.args.get("new_price")
    cafe = db.session.get(entity=Cafe, ident=cafe_id)  # Returns None if cafe_id is not found
    if cafe:
        cafe.coffee_price = new_price
        db.session.commit()
        return jsonify(response={"success": "Successfully updated the price."}), 200
    else:
        return jsonify(error={"Not Found": "Sorry a cafe with that id was not found in the database."}), 404


# Updating the price of a cafe based on a particular id:
# http://127.0.0.1:5000/update-price/CAFE_ID?new_price=£5.67
# Notice that even when the resource is not found and we get an error the correct HTTP code is not being returned.
# It should be 404 for "resource not found" but instead we're getting 200 for "a ok".
# @app.route("/update-price/<int:cafe_id>", methods=["PATCH"])
# def patch_new_price(cafe_id):
#     new_price = request.args.get("new_price")
#     try:
#         cafe = db.get(Cafe, cafe_id)
#     except AttributeError:
#         return jsonify(error={"Not Found": "Sorry a cafe with that id was not found in the database."}), 404
#     else:
#         cafe.coffee_price = new_price
#         db.session.commit()
#         return jsonify(response={"success": "Successfully updated the price."}), 200


# a security feature by requiring an api-key
# If they have the api-key "TopSecretAPIKey" then they're allowed to make the delete request,
# otherwise, we tell them they are not authorized to make that request. A 403 in HTTP speak
# HTTP DELETE - Delete Record
# Deletes a cafe with a particular id. Change the request type to "Delete" in Postman
# /report-closed/<cafe_id>?api-key=TopSecretAPIKey
@app.route("/report-closed/<int:cafe_id>", methods=["DELETE"])
def delete_cafe(cafe_id):
    api_key = request.args.get("api-key")
    if api_key == "TopSecretAPIKey":
        cafe = db.session.execute(db.select(Cafe).where(Cafe.id == cafe_id)).scalar()
        if cafe:
            db.session.delete(cafe)
            db.session.commit()
            return jsonify(response={"success": "Successfully deleted the cafe from the database."}), 200
        else:
            return jsonify(error={"Not Found": "Sorry a cafe with that id was not found in the database."}), 404
    else:
        return jsonify(error={"Forbidden": "Sorry, that's not allowed. Make sure you have the correct api_key."}), 403


if __name__ == '__main__':
    app.run(debug=True)
