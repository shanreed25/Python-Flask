from flask import Flask, jsonify, render_template, request
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column
from sqlalchemy import Integer, String, Boolean
import random


app = Flask(__name__)

# CREATE DB: your application's database models (e.g., User, Product, Order) will then inherit from this Base class.
# This centralizes the ORM setup and makes it easy to manage your models
class Base(DeclarativeBase):# DeclarativeBase serves as the base class for all your ORM-mapped models
    pass
# Connect to Database
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///cafes.db' # Configure the Database URI

# creates an instance of the SQLAlchemy class, which is the core of the Flask-SQLAlchemy extension.
# this db object will then be used to interact with your database within your Flask application
db = SQLAlchemy(model_class=Base)# model_class=Base argument tells Flask-SQLAlchemy to use a custom base class for your database models instead of its default db.Model

# connects the SQLAlchemy database instance (db) to a specific Flask application instance (app),
# enabling the extension to function correctly within that application's context.
db.init_app(app)


# Cafe TABLE Configuration: Define Database Models
class Cafe(db.Model):# inherit from db.Model, provided by Flask-SQLAlchemy
    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    name: Mapped[str] = mapped_column(String(250), unique=True, nullable=False)
    map_url: Mapped[str] = mapped_column(String(500), nullable=False)
    img_url: Mapped[str] = mapped_column(String(500), nullable=False)
    location: Mapped[str] = mapped_column(String(250), nullable=False)
    seats: Mapped[str] = mapped_column(String(250), nullable=False)
    has_toilet: Mapped[bool] = mapped_column(Boolean, nullable=False)
    has_wifi: Mapped[bool] = mapped_column(Boolean, nullable=False)
    has_sockets: Mapped[bool] = mapped_column(Boolean, nullable=False)
    can_take_calls: Mapped[bool] = mapped_column(Boolean, nullable=False)
    coffee_price: Mapped[str] = mapped_column(String(250), nullable=True)

# for converting it to a dictionary to use return jsonify(cafe=random_cafe.to_dict()) in the functions of the routes
    def to_dict(self):
        # Method 1.
        dictionary = {}
        # Loop through each column in the data record
        for column in self.__table__.columns:
            # Create a new dictionary entry;
            # where the key is the name of the column
            # and the value is the value of the column
            dictionary[column.name] = getattr(self, column.name)
        return dictionary

        # Method 2. Altenatively use Dictionary Comprehension to do the same thing.
        # return {column.name: getattr(self, column.name) for column in self.__table__.columns}


# this construct creates a temporary application context. When you wrap db.create_all() within with app.app_context():,
# you are explicitly telling Flask to push an application context for the duration of that block. This ensures that
# db.create_all() has the necessary context to locate the app instance and its configurations, allowing it to connect
# to the database and create the tables based on your defined models
with app.app_context():
    db.create_all()


@app.route("/")
def home():
    return render_template("index.html")


# HTTP GET - Read All Records
@app.route("/all")
def get_all_cafes():
    # .execute: used to send SQL statements to the database and retrieve results
         #  available on Connection and Engine objects within the SQLAlchemy Core, and also on Session objects when working with the ORM
         # takes a SQL statement as an argument: can be
            # A raw SQL string, typically wrapped in sqlalchemy.text() for safety and proper parameter handling
            # A SQLAlchemy expression language construct, such as those generated by select(), insert(), update(), or delete()
    result = db.session.execute(db.select(Cafe).order_by(Cafe.name))
    all_cafes = result.scalars().all()# convert your result into a Python list with .scalars()
    #This uses a List Comprehension but you could also split it into 3 lines.
    return jsonify(cafes=[cafe.to_dict() for cafe in all_cafes])




# HTTP GET - Find a Cafe
@app.route("/search")
def find_cafe():
#Parameters are passed in the URL with a ?
#search for cafes at a particular location, return all the cafes in a particular area
    query_location = request.args.get("loc")# route in url example /search?loc=Peckham
# where() used to select and filter results
    result = db.session.execute(db.select(Cafe).where(Cafe.location == query_location))
    # Note, this may get more than one cafe per location
    all_cafes = result.scalars().all()
    if all_cafes:
        return jsonify(cafes=[cafe.to_dict() for cafe in all_cafes])
    else:
        return jsonify(error={"Not Found": "Sorry, we don't have a cafe at that location."}), 404
    


# HTTP GET - Read Record
# @app.route("/random", methods=["GET"])
@app.route("/random")# GET is allowed by default on all routes, so this is much simpler
def get_cafe():
    #a GET request to the /random route, fetches a random cafe from our database
    result = db.session.execute(db.select(Cafe))
    all_cafes = result.scalars().all()
    random_cafe = random.choice(all_cafes)
    # our server is now acting as an API, we want to return a JSON containing the necessary data
    # serialization: turn the random_cafe SQLAlchemy Object into a JSON
    # Flask has a serialization helper method built-in called jsonify(), and we have to provide the structure of the JSON to return
    # return jsonify(cafe={ # return all the data you have on a particular record
    #     "id": random_cafe.id,
    #     "name": random_cafe.name,
    #     "map_url": random_cafe.map_url,
    #     "img_url": random_cafe.img_url,
    #     "location": random_cafe.location,
    #     "seats": random_cafe.seats,
    #     "has_toilet": random_cafe.has_toilet,
    #     "has_wifi": random_cafe.has_wifi,
    #     "has_sockets": random_cafe.has_sockets,
    #     "can_take_calls": random_cafe.can_take_calls,
    #     "coffee_price": random_cafe.coffee_price,
    # })# it would drive you crazy if you had to write out all that code for every route


    # another method of serializing our database row Object to JSON is by first converting it to a dictionary
    # and then using jsonify() to convert the dictionary (which is very similar in structure to JSON) to a JSON
    # Simply convert the random_cafe data record to a dictionary of key-value pairs.
    return jsonify(cafe=random_cafe.to_dict())
    #********************************************************************************************************
    # in most cases, you might just want to return all the data you have on a particular record but
    # you could also structure the response by omitting some properties

    # return jsonify(cafe={
    #     # Omit the id from the response
    #     # "id": random_cafe.id,
    #     "name": random_cafe.name,
    #     "map_url": random_cafe.map_url,
    #     "img_url": random_cafe.img_url,
    #     "location": random_cafe.location,
    #
    #     # Put some properties in a sub-category
    #     "amenities": {
    #         "seats": random_cafe.seats,
    #         "has_toilet": random_cafe.has_toilet,
    #         "has_wifi": random_cafe.has_wifi,
    #         "has_sockets": random_cafe.has_sockets,
    #         "can_take_calls": random_cafe.can_take_calls,
    #         "coffee_price": random_cafe.coffee_price,
    #     }
    # })


if __name__ == '__main__':
    app.run(debug=True)